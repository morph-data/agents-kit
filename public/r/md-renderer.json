{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "md-renderer",
  "type": "registry:component",
  "title": "Markdown Renderer",
  "description": "Render markdown content.",
  "dependencies": [
    "react-markdown",
    "remark-gfm",
    "react-syntax-highlighter",
    "@types/react-syntax-highlighter",
    "unified",
    "hast"
  ],
  "registryDependencies": [
    "https://agents-kit.dev/r/copy-to-clipboard.json"
  ],
  "files": [
    {
      "path": "src/registry/agents-kit/md-renderer.tsx",
      "content": "// agents-kit v0.0.1\n\n\"use client\";\n\nimport React, { ClassAttributes, FC, HTMLAttributes } from \"react\";\nimport Markdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { oneLight } from \"react-syntax-highlighter/dist/esm/styles/prism\";\n\nimport { cn } from \"@/lib/utils\";\nimport { CopyToClipboard } from \"./copy-to-clipboard\";\n\nimport { Root, Element } from \"hast\";\nimport { Plugin } from \"unified\";\n\ninterface RehypeLoadingSpanOptions {\n  isLoading?: boolean;\n}\n\nconst voidElements = new Set([\n  \"area\",\n  \"base\",\n  \"br\",\n  \"col\",\n  \"embed\",\n  \"hr\",\n  \"img\",\n  \"input\",\n  \"link\",\n  \"meta\",\n  \"param\",\n  \"source\",\n  \"track\",\n  \"wbr\",\n]);\n\nconst rehypeLoadingSpan: Plugin<[RehypeLoadingSpanOptions?], Root> = (\n  options = { isLoading: false }\n) => {\n  return (tree: Root) => {\n    if (!options.isLoading) return;\n    if (!tree.children || tree.children.length === 0) return;\n\n    const spanNode: Element = {\n      type: \"element\",\n      tagName: \"span\",\n      properties: {\n        className: [\n          \"inline-block\",\n          \"w-3\",\n          \"h-3\",\n          \"bg-primary\",\n          \"rounded-full\",\n          \"animate-bounce\",\n          \"ml-1\",\n        ],\n      },\n      children: [],\n    };\n\n    const lastIndex = tree.children.length - 1;\n    const lastNode = tree.children[lastIndex];\n\n    if (lastNode.type === \"element\") {\n      if (voidElements.has(lastNode.tagName)) {\n        tree.children.push(spanNode);\n      } else if (Array.isArray(lastNode.children)) {\n        lastNode.children.push(spanNode);\n      }\n    } else {\n      tree.children.push(spanNode);\n    }\n  };\n};\n\nconst Pre = ({\n  children,\n  ...props\n}: ClassAttributes<HTMLPreElement> & HTMLAttributes<HTMLPreElement>) => {\n  if (!children || typeof children !== \"object\") {\n    return <code {...props}>{children}</code>;\n  }\n  const childType = \"type\" in children ? children.type : \"\";\n  if (childType !== \"code\") {\n    return <code {...props}>{children}</code>;\n  }\n\n  const childProps = \"props\" in children ? children.props : {};\n  const { className, children: code } =\n    childProps as HTMLAttributes<HTMLElement>;\n  const language = className?.replace(\"language-\", \"\");\n\n  return (\n    <div className=\"text-sm relative\">\n      <SyntaxHighlighter language={language} style={oneLight}>\n        {String(code).replace(/\\n$/, \"\")}\n      </SyntaxHighlighter>\n      <div className=\"absolute top-0 right-0 p-1\">\n        <CopyToClipboard value={String(code)} variant={\"ghost\"} />\n      </div>\n    </div>\n  );\n};\n\ntype MdRendererProps = {\n  value?: string;\n  isLoading?: boolean;\n} & HTMLAttributes<HTMLDivElement>;\n\nconst MdRenderer: FC<MdRendererProps> = ({\n  value = \"\",\n  className = \"w-full max-w-ful\",\n  isLoading = false,\n  ...props\n}) => {\n  return (\n    <div className={cn(\"relative\", className)} {...props}>\n      <Markdown\n        remarkPlugins={[remarkGfm]}\n        rehypePlugins={[[rehypeLoadingSpan, { isLoading }]]}\n        components={{ pre: Pre }}\n      >\n        {value}\n      </Markdown>\n    </div>\n  );\n};\n\nexport { MdRenderer };\n",
      "type": "registry:component",
      "target": "components/agents-kit/md-renderer.tsx"
    }
  ]
}