{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "autosize-textarea",
  "type": "registry:component",
  "title": "Autosize Textarea",
  "description": "A textarea that grows with content.",
  "dependencies": [
    "class-variance-authority"
  ],
  "files": [
    {
      "path": "src/registry/agents-kit/autosize-textarea.tsx",
      "content": "\"use client\";\n\nimport React, { forwardRef, RefObject, useEffect, useState } from \"react\";\nimport { useImperativeHandle } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\ntype UseAutosizeTextAreaProps = {\n  textAreaRef: RefObject<HTMLTextAreaElement | null>;\n  minHeight?: number;\n  maxHeight?: number;\n  triggerAutoSize: string;\n};\n\nexport const useAutosizeTextArea = ({\n  textAreaRef,\n  triggerAutoSize,\n  maxHeight = Number.MAX_SAFE_INTEGER,\n  minHeight = 0,\n}: UseAutosizeTextAreaProps) => {\n  const [init, setInit] = useState(true);\n  useEffect(() => {\n    const offsetBorder = 2;\n    const textAreaElement = textAreaRef.current;\n    if (textAreaElement) {\n      if (init) {\n        textAreaElement.style.minHeight = `${minHeight + offsetBorder}px`;\n        if (maxHeight > minHeight) {\n          textAreaElement.style.maxHeight = `${maxHeight}px`;\n        }\n        setInit(false);\n      }\n      textAreaElement.style.height = `${minHeight + offsetBorder}px`;\n      const scrollHeight = textAreaElement.scrollHeight;\n\n      if (scrollHeight > maxHeight) {\n        textAreaElement.style.height = `${maxHeight}px`;\n      } else {\n        textAreaElement.style.height = `${scrollHeight + offsetBorder}px`;\n      }\n    }\n  }, [textAreaRef.current, triggerAutoSize]);\n};\n\nexport type AutosizeTextAreaRef = {\n  textArea: HTMLTextAreaElement;\n  maxHeight: number;\n  minHeight: number;\n};\n\nconst autosizeTextareaVariants = cva(\n  \"flex w-full rounded-md bg-background ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none disabled:cursor-not-allowed disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border border-input focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n        ghost: \"border-none\",\n      },\n      size: {\n        default: \"px-3 py-2 text-sm\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n);\n\ntype AutosizeTextAreaProps = {\n  maxHeight?: number;\n  minHeight?: number;\n} & React.TextareaHTMLAttributes<HTMLTextAreaElement> &\n  VariantProps<typeof autosizeTextareaVariants>;\n\nexport const AutosizeTextarea = forwardRef<\n  AutosizeTextAreaRef,\n  AutosizeTextAreaProps\n>(\n  (\n    {\n      maxHeight = Number.MAX_SAFE_INTEGER,\n      minHeight = 40,\n      className,\n      onChange,\n      value,\n      variant,\n      size,\n      ...props\n    }: AutosizeTextAreaProps,\n    ref: React.Ref<AutosizeTextAreaRef>\n  ) => {\n    const textAreaRef = React.useRef<HTMLTextAreaElement | null>(null);\n    const [triggerAutoSize, setTriggerAutoSize] = React.useState(\"\");\n\n    useAutosizeTextArea({\n      textAreaRef,\n      triggerAutoSize: triggerAutoSize,\n      maxHeight,\n      minHeight,\n    });\n\n    useImperativeHandle(ref, () => ({\n      textArea: textAreaRef.current as HTMLTextAreaElement,\n      focus: () => textAreaRef?.current?.focus(),\n      maxHeight,\n      minHeight,\n    }));\n\n    React.useEffect(() => {\n      setTriggerAutoSize(value as string);\n    }, [props?.defaultValue, value]);\n\n    return (\n      <textarea\n        {...props}\n        value={value}\n        ref={textAreaRef}\n        className={cn(autosizeTextareaVariants({ variant, size }), className)}\n        onChange={(e) => {\n          setTriggerAutoSize(e.target.value);\n          onChange?.(e);\n        }}\n      />\n    );\n  }\n);\nAutosizeTextarea.displayName = \"AutosizeTextarea\";\n",
      "type": "registry:component",
      "target": "components/agents-kit/autosize-textarea.tsx"
    }
  ]
}