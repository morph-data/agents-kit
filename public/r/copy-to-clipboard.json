{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "copy-to-clipboard",
  "type": "registry:component",
  "title": "Copy to Clipbloard",
  "description": "Copy to clipboard button for codeblocks.",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority",
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "tooltip"
  ],
  "files": [
    {
      "path": "src/registry/agents-kit/copy-to-clipboard.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\nimport { buttonVariants } from \"@/components/ui/button\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { LucideClipboard } from \"lucide-react\";\n\nexport interface CopyToClipboardProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n  value: string;\n}\n\nfunction useCopyToClipboard() {\n  const [showTooltip, setShowTooltip] = React.useState(false);\n\n  const openTooltip = React.useCallback(() => {\n    setShowTooltip(true);\n    setTimeout(() => setShowTooltip(false), 3000);\n  }, []);\n\n  const copy = React.useCallback(\n    async (text: string) => {\n      if (!navigator?.clipboard) {\n        console.warn(\"Clipboard not supported\");\n        return false;\n      }\n\n      // Try to save to clipboard then save it in the state if worked\n      try {\n        await navigator.clipboard.writeText(text);\n        openTooltip();\n        return true;\n      } catch (error) {\n        console.warn(\"Copy failed\", error);\n        return false;\n      }\n    },\n    [openTooltip]\n  );\n\n  return {\n    copy,\n    showTooltip,\n  };\n}\n\nconst CopyToClipboard = React.forwardRef<\n  HTMLButtonElement,\n  CopyToClipboardProps\n>(\n  (\n    {\n      className,\n      variant,\n      size = \"icon\",\n      asChild = false,\n      value,\n      onClick,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\";\n\n    const { copy, showTooltip } = useCopyToClipboard();\n\n    const handleClick = React.useCallback(\n      (e: React.MouseEvent<HTMLButtonElement>) => {\n        copy(value);\n        if (onClick) {\n          onClick(e);\n        }\n      },\n      [copy, value, onClick]\n    );\n\n    return (\n      <TooltipProvider>\n        <Tooltip open={showTooltip}>\n          <TooltipTrigger asChild>\n            <Comp\n              className={cn(buttonVariants({ variant, size, className }))}\n              ref={ref}\n              onClick={handleClick}\n              {...props}\n            >\n              <LucideClipboard />\n              {props.children}\n            </Comp>\n          </TooltipTrigger>\n          <TooltipContent>\n            <span>Copied</span>\n          </TooltipContent>\n        </Tooltip>\n      </TooltipProvider>\n    );\n  }\n);\nCopyToClipboard.displayName = \"CopyToClipboard\";\n\nexport { CopyToClipboard, useCopyToClipboard };\n",
      "type": "registry:component",
      "target": "components/agents-kit/copy-to-clipboard.tsx"
    }
  ]
}